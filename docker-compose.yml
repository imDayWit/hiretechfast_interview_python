version: '3.8'

services:
  app:
    build: .
    restart: always
    image: app-image:latest
    tty: true
    depends_on:
      - db
      - clickhouse
    command: [ "../docker/wait-for-it.sh", "db:5432", "--", "python", "manage.py", "runserver", "0.0.0.0:8000" ]
    ports:
      - 8000:8000
    volumes:
      - app_static_files:/srv/app/static:rw
      - app_media_files:/srv/app/media:rw
      - .:/srv/app

  db:
    tty: true
    image: postgres:16-alpine
    volumes:
      - ./docker/postgres/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
      - dev-db-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: test_pg_user
      POSTGRES_PASSWORD: 123456
      DATABASE_USER: test_user
      DATABASE_PASSWORD: 123456
      DATABASE_NAME: test_database
    ports:
      - 5432:5432

  redis:
    image: redis:6-alpine
    networks:
      - default
    ports:
      - 6379:6379
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 1s
      timeout: 3s
      retries: 30

  clickhouse:
    image: "clickhouse/clickhouse-server:23.8.2.7-alpine"
    ports:
      - 8123:8123
    volumes:
      - ./docker/clickhouse/init.sql:/docker-entrypoint-initdb.d/init.sql

  celery-worker:
    container_name: celery-worker-container
    depends_on:
      redis:
        condition: service_healthy
    image: app-image:latest
    env_file: ./src/core/.env
    volumes:
      - celery_log:/var/log/
    restart: "no"
    command: [ 'celery', '-A', 'core', 'worker', '-l', 'INFO', '--concurrency=4' ]
    healthcheck:
      test: celery -A core status || exit 1
      interval: 10s
      timeout: 10s
      retries: 10

  celery-beat:
    container_name: celery-beat-container
    depends_on:
      - celery-worker
    image: app-image:latest
    env_file: ./src/core/.env
    restart: "no"
    command: celery -A core beat -l INFO --scheduler django_celery_beat.schedulers:DatabaseScheduler


volumes:
  dev-db-data: {}
  app_media_files: { }
  app_static_files: { }
  celery_log:
